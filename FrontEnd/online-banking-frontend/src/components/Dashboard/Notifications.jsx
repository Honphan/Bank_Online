import React, { useState } from 'react';
import '../../assets/styles/Dashboard/Notifications.css';

const Notifications = () => {
  const [notifications] = useState([
    {
      id: 1,
      title: 'Giao d·ªãch th√†nh c√¥ng',
      message: 'B·∫°n ƒë√£ chuy·ªÉn 500,000 VND cho Nguy·ªÖn VƒÉn A',
      time: '2 ph√∫t tr∆∞·ªõc',
      type: 'success',
      read: false
    },
    {
      id: 2,
      title: 'Nh·∫Øc nh·ªü thanh to√°n',
      message: 'H√≥a ƒë∆°n ƒëi·ªán th√°ng 1/2024 s·∫Øp ƒë·∫øn h·∫°n thanh to√°n',
      time: '1 gi·ªù tr∆∞·ªõc',
      type: 'warning',
      read: false
    },
    {
      id: 3,
      title: 'C·∫≠p nh·∫≠t b·∫£o m·∫≠t',
      message: 'H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c t√≠nh nƒÉng b·∫£o m·∫≠t m·ªõi',
      time: '3 gi·ªù tr∆∞·ªõc',
      type: 'info',
      read: true
    },
    {
      id: 4,
      title: 'Khuy·∫øn m√£i ƒë·∫∑c bi·ªát',
      message: 'Gi·∫£m 50% ph√≠ chuy·ªÉn ti·ªÅn trong th√°ng n√†y',
      time: '1 ng√†y tr∆∞·ªõc',
      type: 'promotion',
      read: true
    }
  ]);

  const [showAll, setShowAll] = useState(false);
  const unreadCount = notifications.filter(n => !n.read).length;

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'success': return '‚úÖ';
      case 'warning': return '‚ö†Ô∏è';
      case 'info': return '‚ÑπÔ∏è';
      case 'promotion': return 'üéâ';
      default: return 'üì¢';
    }
  };

  const displayedNotifications = showAll ? notifications : notifications.slice(0, 3);

  return (
    <div className="notifications">
      <div className="notifications-header">
        <h3>Th√¥ng b√°o</h3>
        {unreadCount > 0 && (
          <span className="unread-badge">{unreadCount}</span>
        )}
        {notifications.length > 3 && (
          <button 
            className="toggle-btn"
            onClick={() => setShowAll(!showAll)}
          >
            {showAll ? 'Thu g·ªçn' : 'Xem t·∫•t c·∫£'}
          </button>
        )}
      </div>
      
      <div className="notifications-list">
        {displayedNotifications.map(notification => (
          <div 
            key={notification.id} 
            className={`notification-item ${!notification.read ? 'unread' : ''}`}
          >
            <div className="notification-icon">
              {getNotificationIcon(notification.type)}
            </div>
            <div className="notification-content">
              <div className="notification-title">{notification.title}</div>
              <div className="notification-message">{notification.message}</div>
              <div className="notification-time">{notification.time}</div>
            </div>
            {!notification.read && <div className="unread-dot"></div>}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Notifications;
