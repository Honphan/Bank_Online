import React, { useState } from 'react';
import { useNavigate, Link} from 'react-router-dom';
import '../assets/styles/register.css';
import { register, socialRegister } from '../api/authApi';
/**
 * @component RegisterForm
 * @description Form ƒëƒÉng k√Ω vi·∫øt b·∫±ng ReactJS (JSX)
 */
export default function RegisterForm() {
    const navigate = useNavigate(); // Kh·ªüi t·∫°o hook useNavigate
  const [form, setForm] = useState({
    fullname: '',
    username: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    agreeTerms: false,
  });

  const [errors, setErrors] = useState({
    fullname: '',
    username: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    agreeTerms: '',
  });

  const validateForm = () => {
    let newErrors = {
      fullname: '',
      username: '',
      email: '',
      phone: '',
      password: '',
      confirmPassword: '',
      agreeTerms: '',
    };
    let isValid = true;

    if (!form.fullname.trim()) {
      newErrors.fullname = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
      isValid = false;
    }

    if (!form.username.trim()) {
      newErrors.username = 'Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng';
      isValid = false;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!form.email.trim()) {
      newErrors.email = 'Vui l√≤ng nh·∫≠p email';
      isValid = false;
    } else if (!emailRegex.test(form.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
      isValid = false;
    }

    const phoneRegex = /^[0-9]{10}$/;
    if (!form.phone.trim()) {
      newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
      isValid = false;
    } else if (!phoneRegex.test(form.phone.replace(/\s/g, ''))) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
      isValid = false;
    }

    if (!form.password) {
      newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
      isValid = false;
    } else if (form.password.length < 1) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 11 k√Ω t·ª±';
      isValid = false;
    }

    if (!form.confirmPassword) {
      newErrors.confirmPassword = 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
      isValid = false;
    } else if (form.password !== form.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
      isValid = false;
    }

    if (!form.agreeTerms) {
      newErrors.agreeTerms = 'Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n';
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const handleRegister = async () => {
  if (validateForm()) {
    try {
      // G·ªçi API ƒëƒÉng k√Ω
      const response = await register({
        fullName: form.fullname,
        username: form.username,
        email: form.email,
        phoneNumber: form.phone,
        password: form.password
      });
      
      // X·ª≠ l√Ω khi ƒëƒÉng k√Ω th√†nh c√¥ng
      alert('ƒêƒÉng k√Ω th√†nh c√¥ng!');
      console.log('K·∫øt qu·∫£ ƒëƒÉng k√Ω:', response);
       // Reset form
      setForm({
        fullname: '',
        username: '',
        email: '',
        phone: '',
        password: '',
        confirmPassword: '',
        agreeTerms: false,
      });
      
      // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng (n·∫øu c·∫ßn)
      // navigate('/login');
      navigate('/login');

    } catch (error) {
      // X·ª≠ l√Ω l·ªói
      alert(error.message);
    }
  }
};
const handleSocialLogin = async (provider) => {
  try {
    // Logic x√°c th·ª±c v·ªõi provider (Google ho·∫∑c Facebook)
    // Th√¥ng th∆∞·ªùng c·∫ßn s·ª≠ d·ª•ng th∆∞ vi·ªán OAuth ri√™ng cho m·ªói provider
    
    // Gi·∫£ ƒë·ªãnh d·ªØ li·ªáu x√°c th·ª±c t·ª´ OAuth provider
    const authData = { token: 'oauth-token-here', /* c√°c th√¥ng tin kh√°c */ };
    
    const response = await socialRegister(provider.toLowerCase(), authData);
    console.log(`ƒêƒÉng k√Ω v·ªõi ${provider} th√†nh c√¥ng:`, response);
    
    // X·ª≠ l√Ω sau khi ƒëƒÉng k√Ω th√†nh c√¥ng
    alert(`ƒêƒÉng k√Ω v·ªõi ${provider} th√†nh c√¥ng!`);
  } catch (error) {
    alert(error.message);
  }
};

  return (
    <div className="form-container">
      <h2>ƒêƒÉng k√Ω t√†i kho·∫£n</h2>
      <p className="form-help" style={{ textAlign: 'center', marginBottom: '20px' }}>
        T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª• ng√¢n h√†ng tr·ª±c tuy·∫øn
      </p>

      <form
        onSubmit={(e) => {
          e.preventDefault();
          handleRegister();
        }}
      >
         {/* fullname */}
        <div>
          <input
            type="text"
            placeholder="H·ªç v√† t√™n"
            value={form.fullname}
            onChange={(e) => setForm({ ...form, fullname: e.target.value })}
            className="form-input"
          />
          {errors.fullname && <p className="form-error">{errors.fullname}</p>}
        </div>
        {/* username */}
        <div>
          <input
            type="text"
            placeholder="Username"
            value={form.username}
            onChange={(e) => setForm({ ...form, username: e.target.value })}
            className="form-input"
          />
          {errors.username && <p className="form-error">{errors.username}</p>}
        </div>

        {/* Email */}
        <div>
          <input
            type="email"
            placeholder="Email"
            value={form.email}
            onChange={(e) => setForm({ ...form, email: e.target.value })}
            className="form-input"
          />
          {errors.email && <p className="form-error">{errors.email}</p>}
        </div>

        {/* S·ªë ƒëi·ªán tho·∫°i */}
        <div>
          <input
            type="text"
            placeholder="S·ªë ƒëi·ªán tho·∫°i"
            value={form.phone}
            onChange={(e) => setForm({ ...form, phone: e.target.value })}
            className="form-input"
          />
          {errors.phone && <p className="form-error">{errors.phone}</p>}
        </div>

        {/* M·∫≠t kh·∫©u */}
        <div>
          <input
            type="password"
            placeholder="M·∫≠t kh·∫©u"
            value={form.password}
            onChange={(e) => setForm({ ...form, password: e.target.value })}
            className="form-input"
          />
          {errors.password && <p className="form-error">{errors.password}</p>}
        </div>

        {/* X√°c nh·∫≠n m·∫≠t kh·∫©u */}
        <div>
          <input
            type="password"
            placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
            value={form.confirmPassword}
            onChange={(e) => setForm({ ...form, confirmPassword: e.target.value })}
            className="form-input"
          />
          {errors.confirmPassword && <p className="form-error">{errors.confirmPassword}</p>}
        </div>

        {/* Checkbox ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n */}
        <label className="form-checkbox">
          <input
            type="checkbox"
            checked={form.agreeTerms}
            onChange={(e) => setForm({ ...form, agreeTerms: e.target.checked })}
          />
          <span>T√¥i ƒë·ªìng √Ω v·ªõi <a href="#" style={{ color: 'var(--primary)' }}>ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a></span>
        </label>
        {errors.agreeTerms && <p className="form-error">{errors.agreeTerms}</p>}

        {/* Button ƒëƒÉng k√Ω */}
        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
          <button type="submit" className="btn-primary">
            ƒêƒÉng k√Ω t√†i kho·∫£n
          </button>
        </div>
       

        {/* Social login buttons */}
        <div style={{ display: 'flex', gap: '12px', marginTop: '16px' }}>
          <button
            type="button"
            onClick={() => handleSocialLogin('Google')}
            className="btn-social"
            style={{ flex: 1 }}
          >
            üìß Google
          </button>
          <button
            type="button"
            onClick={() => handleSocialLogin('Facebook')}
            className="btn-social"
            style={{ flex: 1 }}
          >
            üìò Facebook
          </button>
        </div>

        <p className="form-help" style={{ textAlign: 'center', marginTop: '16px',justifyContent: 'center'  }}>
          ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/login" style={{ color: 'var(--primary)' }}>ƒêƒÉng nh·∫≠p ngay</Link>
        </p>
      </form>
    </div>
  );
}

